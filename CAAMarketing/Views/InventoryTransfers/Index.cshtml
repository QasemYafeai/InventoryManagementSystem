@model IEnumerable<CAAMarketing.Models.InventoryTransfer>

@{
    ViewData["Title"] = "Index";
}

<form asp-action="Index" method="get">

    <input type="hidden" name="sortDirection" value="@ViewData["sortDirection"]" />
    <input type="hidden" name="sortField" value="@ViewData["sortField"]" />
    
    <div class="form-horizontal">
        <button class="btn btn-filter" type="button" data-bs-toggle="collapse" id="filterToggle" data-bs-target="#collapseFilter" aria-expanded="false" aria-controls="collapseFilter" title="Click this to filter/search">
            <i class="material-icons">Filter/Search</i>
        </button>
    </div>
    <div class="collapse @(ViewData["Filtering"])" id="collapseFilter">
        <div class="card card-body">
                        
                            <div class="card-body filter-content">
                <div class="row">
                    <div class="form-group col-md-4">
                                
                                    <label class="control-label">Filter by From-Location:</label>
                                    @Html.DropDownList("FromLocationID", null, "All From-Locations", htmlAttributes: new { @class = "form-control" })
                                </div>
                    <div class="form-group col-md-4">
                                    <label class="control-label">Filter by To-Location:</label>
                                    @Html.DropDownList("ToLocationId", null, "All To-Locations", htmlAttributes: new { @class = "form-control" })
                                </div>
                    <div class="form-group col-md-4">
                                    <label class="control-label">Search Item Name OR UPC:</label>
                                    @Html.TextBox("SearchString", null, new { @class = "form-control" })
                                </div>
                                <div class="form-group col-md-4 align-self-end">
                                    <input type="submit" name="actionButton" value="Filter" class="btn btn-outline-primary" />
                                    <a asp-action="Index" class="btn btn-outline-dark">Clear</a>
                                </div>
                                </div>
                      </div>
        </div>
    </div>

            <div class="container-fluid">
        <div class="table-responsive">
            <div class="table-wrapper">
                <div class="table-title d-flex justify-content-between align-items-center">
                    <h1>Inventory Transfer</h1>
                </div>
                <table class="table table-hover">
                    <thead class="thead-light">
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Item.Name)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.FromLocation.Name)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ToLocation.Name)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Quantity)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.TransferDate)
                        </th>
                            <th>
                                Received
                            </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Item.Archived)
                        </th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FromLocation.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ToLocation.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TransferDate)
                </td>
                                <td>
                                    @{
                                        DateTime deliveryDate = Convert.ToDateTime(item.TransferDate);
                                        TimeSpan timeRemaining = deliveryDate - DateTime.Now;

                                        int totalDaysRemaining = (int)timeRemaining.TotalDays;
                                        int totalWeeksRemaining = (int)timeRemaining.TotalDays / 7;
                                        int totalMonthsRemaining = (int)timeRemaining.TotalDays / 30;
                                        int totalYearsRemaining = (int)timeRemaining.TotalDays / 365;
                                        int totalHoursRemaining = (int)timeRemaining.TotalHours;
                                        int totalMinutesRemaining = (int)timeRemaining.TotalMinutes;
                                        int totalSecondsRemaining = (int)timeRemaining.TotalSeconds;

                                        var progress = 100 - Math.Min(Math.Max(totalDaysRemaining, 0), 100);

                                        string remainingTime = string.Empty;

                                        if (totalYearsRemaining > 0)
                                        {
                                            remainingTime = $"{totalYearsRemaining} year{(totalYearsRemaining > 1 ? "s" : string.Empty)}";
                                            if (totalMonthsRemaining % 12 > 0)
                                            {
                                                remainingTime += $", {totalMonthsRemaining % 12} month{(totalMonthsRemaining % 12 > 1 ? "s" : string.Empty)}";
                                            }
                                        }
                                        else if (totalMonthsRemaining > 0)
                                        {
                                            remainingTime = $"{totalMonthsRemaining} month{(totalMonthsRemaining > 1 ? "s" : string.Empty)}";
                                            if (totalDaysRemaining % 30 > 0)
                                            {
                                                remainingTime += $", {totalDaysRemaining % 30} day{(totalDaysRemaining % 30 > 1 ? "s" : string.Empty)}";
                                            }
                                        }
                                        else if (totalWeeksRemaining > 0)
                                        {
                                            remainingTime = $"{totalWeeksRemaining} week{(totalWeeksRemaining > 1 ? "s" : string.Empty)}";
                                            if (totalDaysRemaining % 7 > 0)
                                            {
                                                remainingTime += $", {totalDaysRemaining % 7} day{(totalDaysRemaining % 7 > 1 ? "s" : string.Empty)}";
                                            }
                                        }
                                        else if (totalDaysRemaining > 0)
                                        {
                                            remainingTime = $"{totalDaysRemaining} day{(totalDaysRemaining > 1 ? "s" : string.Empty)}";
                                            if (totalHoursRemaining % 24 > 0)
                                            {
                                                remainingTime += $", {totalHoursRemaining % 24} hour{(totalHoursRemaining % 24 > 1 ? "s" : string.Empty)}";
                                            }
                                        }
                                        else if (totalHoursRemaining > 0)
                                        {
                                            remainingTime = $"{totalHoursRemaining} hour{(totalHoursRemaining > 1 ? "s" : string.Empty)}";
                                            if (totalMinutesRemaining % 60 > 0)
                                            {
                                                remainingTime += $", {totalMinutesRemaining % 60} minute{(totalMinutesRemaining % 60 > 1 ? "s" : string.Empty)}";
                                            }
                                        }
                                        else if (totalMinutesRemaining > 0)
                                        {
                                            remainingTime = $"{totalMinutesRemaining} minute{(totalMinutesRemaining > 1 ? "s" : string.Empty)}";
                                            if (totalSecondsRemaining % 60 > 0)
                                            {
                                                remainingTime += $", {totalSecondsRemaining % 60} second{(totalSecondsRemaining % 60 > 1 ? "s" : string.Empty)}";
                                            }
                                        }
                                    }

                                    <div class="progress">
                                        <div class="progress-bar @((deliveryDate > DateTime.Now) ? "bg-warning" : "bg-success")"
                                         role="progressbar"
                                         aria-valuenow="@progress"
                                         aria-valuemin="0"
                                         aria-valuemax="100"
                                         style="width: @progress%;">
                                            @if (deliveryDate > DateTime.Now)
                                            {
                                                @($"In Progress ({remainingTime} remaining)")
                                            }
                                            else
                                            {
                                                <span class="text-white">Received</span>
                                            }
                                        </div>
                                    </div>
                                </td>
                <td>
                        @(item.Item.Archived ? " " : " ")
                        <span class="status text-success @(!item.Item.Archived ? "hide" : "")">&bull;</span>
                        <span class="status text-danger @(item.Item.Archived ? "hide" : "")">&bull;</span>
                    
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    <a asp-action="Index" asp-controller="OrderItems" title="Click this to go to details" class="padding-for-actions" asp-route-ItemID="@item.ItemId"> Details   </a> |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <partial name="_PagingNavBar" />
    </div>
            
</form>